'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _helpers = require('./helpers');

var _attachment_manager = require('./attachment_manager');

var _attachment_manager2 = _interopRequireDefault(_attachment_manager);

var _status = require('../status');

var _status2 = _interopRequireDefault(_status);

var _step_runner = require('./step_runner');

var _step_runner2 = _interopRequireDefault(_step_runner);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var TestCaseRunner = function () {
  function TestCaseRunner(_ref) {
    var _this = this;

    var eventBroadcaster = _ref.eventBroadcaster,
        skip = _ref.skip,
        testCase = _ref.testCase,
        supportCodeLibrary = _ref.supportCodeLibrary,
        worldParameters = _ref.worldParameters;
    (0, _classCallCheck3.default)(this, TestCaseRunner);

    var attachmentManager = new _attachment_manager2.default(function (_ref2) {
      var data = _ref2.data,
          media = _ref2.media;

      if (_this.testStepIndex > _this.maxTestStepIndex) {
        throw new Error('Cannot attach after all steps/hooks have finished running. Ensure your step/hook waits for the attach to finish.');
      }
      _this.emit('test-step-attachment', {
        index: _this.testStepIndex,
        data: data,
        media: media
      });
    });
    this.eventBroadcaster = eventBroadcaster;
    this.skip = skip;
    this.testCase = testCase;
    this.supportCodeLibrary = supportCodeLibrary;
    this.world = new supportCodeLibrary.World({
      attach: attachmentManager.create.bind(attachmentManager),
      parameters: worldParameters
    });
    this.beforeHookDefinitions = this.getBeforeHookDefinitions();
    this.afterHookDefinitions = this.getAfterHookDefinitions();
    this.testStepIndex = 0;
    this.maxTestStepIndex = this.beforeHookDefinitions.length + this.testCase.pickle.steps.length + this.afterHookDefinitions.length - 1;
    this.result = {
      duration: 0,
      status: this.skip ? _status2.default.SKIPPED : _status2.default.PASSED
    };
    this.testCaseSourceLocation = {
      uri: this.testCase.uri,
      line: this.testCase.pickle.locations[0].line
    };
  }

  (0, _createClass3.default)(TestCaseRunner, [{
    key: 'emit',
    value: function emit(name, data) {
      var eventData = (0, _extends3.default)({}, data);
      if (_lodash2.default.startsWith(name, 'test-case')) {
        eventData.sourceLocation = this.testCaseSourceLocation;
      } else {
        eventData.testCase = { sourceLocation: this.testCaseSourceLocation };
      }
      this.eventBroadcaster.emit(name, eventData);
    }
  }, {
    key: 'emitPrepared',
    value: function emitPrepared() {
      var _this2 = this;

      var steps = [];
      this.beforeHookDefinitions.forEach(function (definition) {
        var actionLocation = { uri: definition.uri, line: definition.line };
        steps.push({ actionLocation: actionLocation });
      });
      this.testCase.pickle.steps.forEach(function (step) {
        var actionLocations = _this2.getStepDefinitions(step).map(function (definition) {
          return {
            uri: definition.uri,
            line: definition.line
          };
        });
        var sourceLocation = {
          uri: _this2.testCase.uri,
          line: _lodash2.default.last(step.locations).line
        };
        var data = { sourceLocation: sourceLocation };
        if (actionLocations.length === 1) {
          data.actionLocation = actionLocations[0];
        }
        steps.push(data);
      });
      this.afterHookDefinitions.forEach(function (definition) {
        var actionLocation = { uri: definition.uri, line: definition.line };
        steps.push({ actionLocation: actionLocation });
      });
      this.emit('test-case-prepared', { steps: steps });
    }
  }, {
    key: 'getAfterHookDefinitions',
    value: function getAfterHookDefinitions() {
      var _this3 = this;

      return this.supportCodeLibrary.afterTestCaseHookDefinitions.filter(function (hookDefinition) {
        return hookDefinition.appliesToTestCase(_this3.testCase);
      });
    }
  }, {
    key: 'getBeforeHookDefinitions',
    value: function getBeforeHookDefinitions() {
      var _this4 = this;

      return this.supportCodeLibrary.beforeTestCaseHookDefinitions.filter(function (hookDefinition) {
        return hookDefinition.appliesToTestCase(_this4.testCase);
      });
    }
  }, {
    key: 'getStepDefinitions',
    value: function getStepDefinitions(step) {
      var _this5 = this;

      return this.supportCodeLibrary.stepDefinitions.filter(function (stepDefinition) {
        return stepDefinition.matchesStepName({
          stepName: step.text,
          parameterTypeRegistry: _this5.supportCodeLibrary.parameterTypeRegistry
        });
      });
    }
  }, {
    key: 'invokeStep',
    value: function invokeStep(step, stepDefinition, hookParameter) {
      return _step_runner2.default.run({
        defaultTimeout: this.supportCodeLibrary.defaultTimeout,
        hookParameter: hookParameter,
        parameterTypeRegistry: this.supportCodeLibrary.parameterTypeRegistry,
        step: step,
        stepDefinition: stepDefinition,
        world: this.world
      });
    }
  }, {
    key: 'isSkippingSteps',
    value: function isSkippingSteps() {
      return this.result.status !== _status2.default.PASSED;
    }
  }, {
    key: 'shouldUpdateStatus',
    value: function shouldUpdateStatus(testStepResult) {
      switch (testStepResult.status) {
        case _status2.default.FAILED:
        case _status2.default.AMBIGUOUS:
          return this.result.status !== _status2.default.FAILED || this.result.status !== _status2.default.AMBIGUOUS;
        default:
          return this.result.status === _status2.default.PASSED || this.result.status === _status2.default.SKIPPED;
      }
    }
  }, {
    key: 'aroundTestStep',
    value: function () {
      var _ref3 = (0, _bluebird.coroutine)(function* (runStepFn) {
        this.emit('test-step-started', { index: this.testStepIndex });
        var testStepResult = yield runStepFn();
        if (testStepResult.duration) {
          this.result.duration += testStepResult.duration;
        }
        if (this.shouldUpdateStatus(testStepResult)) {
          this.result.status = testStepResult.status;
        }
        if (testStepResult.exception) {
          this.result.exception = testStepResult.exception;
        }
        this.emit('test-step-finished', {
          index: this.testStepIndex,
          result: testStepResult
        });
        this.testStepIndex += 1;
      });

      function aroundTestStep(_x) {
        return _ref3.apply(this, arguments);
      }

      return aroundTestStep;
    }()
  }, {
    key: 'run',
    value: function () {
      var _ref4 = (0, _bluebird.coroutine)(function* () {
        this.emitPrepared();
        this.emit('test-case-started', {});
        yield this.runHooks(this.beforeHookDefinitions, {
          sourceLocation: this.testCaseSourceLocation,
          pickle: this.testCase.pickle
        });
        yield this.runSteps();
        yield this.runHooks(this.afterHookDefinitions, {
          sourceLocation: this.testCaseSourceLocation,
          pickle: this.testCase.pickle,
          result: this.result
        });
        this.emit('test-case-finished', { result: this.result });
        return this.result;
      });

      function run() {
        return _ref4.apply(this, arguments);
      }

      return run;
    }()
  }, {
    key: 'runHook',
    value: function () {
      var _ref5 = (0, _bluebird.coroutine)(function* (hookDefinition, hookParameter) {
        if (this.skip) {
          return { status: _status2.default.SKIPPED };
        }
        return this.invokeStep(null, hookDefinition, hookParameter);
      });

      function runHook(_x2, _x3) {
        return _ref5.apply(this, arguments);
      }

      return runHook;
    }()
  }, {
    key: 'runHooks',
    value: function () {
      var _ref6 = (0, _bluebird.coroutine)(function* (hookDefinitions, hookParameter) {
        var _this6 = this;

        yield _bluebird2.default.each(hookDefinitions, function () {
          var _ref7 = (0, _bluebird.coroutine)(function* (hookDefinition) {
            yield _this6.aroundTestStep(function () {
              return _this6.runHook(hookDefinition, hookParameter);
            });
          });

          return function (_x6) {
            return _ref7.apply(this, arguments);
          };
        }());
      });

      function runHooks(_x4, _x5) {
        return _ref6.apply(this, arguments);
      }

      return runHooks;
    }()
  }, {
    key: 'runStep',
    value: function () {
      var _ref8 = (0, _bluebird.coroutine)(function* (step) {
        var stepDefinitions = this.getStepDefinitions(step);
        if (stepDefinitions.length === 0) {
          return { status: _status2.default.UNDEFINED };
        } else if (stepDefinitions.length > 1) {
          return {
            exception: (0, _helpers.getAmbiguousStepException)(stepDefinitions),
            status: _status2.default.AMBIGUOUS
          };
        } else if (this.isSkippingSteps()) {
          return { status: _status2.default.SKIPPED };
        }
        return this.invokeStep(step, stepDefinitions[0]);
      });

      function runStep(_x7) {
        return _ref8.apply(this, arguments);
      }

      return runStep;
    }()
  }, {
    key: 'runSteps',
    value: function () {
      var _ref9 = (0, _bluebird.coroutine)(function* () {
        var _this7 = this;

        yield _bluebird2.default.each(this.testCase.pickle.steps, function () {
          var _ref10 = (0, _bluebird.coroutine)(function* (step) {
            yield _this7.aroundTestStep(function () {
              return _this7.runStep(step);
            });
          });

          return function (_x8) {
            return _ref10.apply(this, arguments);
          };
        }());
      });

      function runSteps() {
        return _ref9.apply(this, arguments);
      }

      return runSteps;
    }()
  }]);
  return TestCaseRunner;
}();

exports.default = TestCaseRunner;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydW50aW1lL3Rlc3RfY2FzZV9ydW5uZXIuanMiXSwibmFtZXMiOlsiVGVzdENhc2VSdW5uZXIiLCJldmVudEJyb2FkY2FzdGVyIiwic2tpcCIsInRlc3RDYXNlIiwic3VwcG9ydENvZGVMaWJyYXJ5Iiwid29ybGRQYXJhbWV0ZXJzIiwiYXR0YWNobWVudE1hbmFnZXIiLCJkYXRhIiwibWVkaWEiLCJ0ZXN0U3RlcEluZGV4IiwibWF4VGVzdFN0ZXBJbmRleCIsIkVycm9yIiwiZW1pdCIsImluZGV4Iiwid29ybGQiLCJXb3JsZCIsImF0dGFjaCIsImNyZWF0ZSIsInBhcmFtZXRlcnMiLCJiZWZvcmVIb29rRGVmaW5pdGlvbnMiLCJnZXRCZWZvcmVIb29rRGVmaW5pdGlvbnMiLCJhZnRlckhvb2tEZWZpbml0aW9ucyIsImdldEFmdGVySG9va0RlZmluaXRpb25zIiwibGVuZ3RoIiwicGlja2xlIiwic3RlcHMiLCJyZXN1bHQiLCJkdXJhdGlvbiIsInN0YXR1cyIsIlNLSVBQRUQiLCJQQVNTRUQiLCJ0ZXN0Q2FzZVNvdXJjZUxvY2F0aW9uIiwidXJpIiwibGluZSIsImxvY2F0aW9ucyIsIm5hbWUiLCJldmVudERhdGEiLCJzdGFydHNXaXRoIiwic291cmNlTG9jYXRpb24iLCJmb3JFYWNoIiwiYWN0aW9uTG9jYXRpb24iLCJkZWZpbml0aW9uIiwicHVzaCIsImFjdGlvbkxvY2F0aW9ucyIsImdldFN0ZXBEZWZpbml0aW9ucyIsInN0ZXAiLCJtYXAiLCJsYXN0IiwiYWZ0ZXJUZXN0Q2FzZUhvb2tEZWZpbml0aW9ucyIsImZpbHRlciIsImhvb2tEZWZpbml0aW9uIiwiYXBwbGllc1RvVGVzdENhc2UiLCJiZWZvcmVUZXN0Q2FzZUhvb2tEZWZpbml0aW9ucyIsInN0ZXBEZWZpbml0aW9ucyIsInN0ZXBEZWZpbml0aW9uIiwibWF0Y2hlc1N0ZXBOYW1lIiwic3RlcE5hbWUiLCJ0ZXh0IiwicGFyYW1ldGVyVHlwZVJlZ2lzdHJ5IiwiaG9va1BhcmFtZXRlciIsInJ1biIsImRlZmF1bHRUaW1lb3V0IiwidGVzdFN0ZXBSZXN1bHQiLCJGQUlMRUQiLCJBTUJJR1VPVVMiLCJydW5TdGVwRm4iLCJzaG91bGRVcGRhdGVTdGF0dXMiLCJleGNlcHRpb24iLCJlbWl0UHJlcGFyZWQiLCJydW5Ib29rcyIsInJ1blN0ZXBzIiwiaW52b2tlU3RlcCIsImhvb2tEZWZpbml0aW9ucyIsImVhY2giLCJhcm91bmRUZXN0U3RlcCIsInJ1bkhvb2siLCJVTkRFRklORUQiLCJpc1NraXBwaW5nU3RlcHMiLCJydW5TdGVwIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7QUFDQTs7QUFDQTs7OztBQUVBOzs7O0FBQ0E7Ozs7OztJQUVxQkEsYztBQUNuQixnQ0FNRztBQUFBOztBQUFBLFFBTERDLGdCQUtDLFFBTERBLGdCQUtDO0FBQUEsUUFKREMsSUFJQyxRQUpEQSxJQUlDO0FBQUEsUUFIREMsUUFHQyxRQUhEQSxRQUdDO0FBQUEsUUFGREMsa0JBRUMsUUFGREEsa0JBRUM7QUFBQSxRQUREQyxlQUNDLFFBRERBLGVBQ0M7QUFBQTs7QUFDRCxRQUFNQyxvQkFBb0IsaUNBQXNCLGlCQUFxQjtBQUFBLFVBQWxCQyxJQUFrQixTQUFsQkEsSUFBa0I7QUFBQSxVQUFaQyxLQUFZLFNBQVpBLEtBQVk7O0FBQ25FLFVBQUksTUFBS0MsYUFBTCxHQUFxQixNQUFLQyxnQkFBOUIsRUFBZ0Q7QUFDOUMsY0FBTSxJQUFJQyxLQUFKLENBQ0osa0hBREksQ0FBTjtBQUdEO0FBQ0QsWUFBS0MsSUFBTCxDQUFVLHNCQUFWLEVBQWtDO0FBQ2hDQyxlQUFPLE1BQUtKLGFBRG9CO0FBRWhDRixrQkFGZ0M7QUFHaENDO0FBSGdDLE9BQWxDO0FBS0QsS0FYeUIsQ0FBMUI7QUFZQSxTQUFLUCxnQkFBTCxHQUF3QkEsZ0JBQXhCO0FBQ0EsU0FBS0MsSUFBTCxHQUFZQSxJQUFaO0FBQ0EsU0FBS0MsUUFBTCxHQUFnQkEsUUFBaEI7QUFDQSxTQUFLQyxrQkFBTCxHQUEwQkEs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RU8sSUFBSXZCLGdCQUFnQjlCLE1BQWhCLEdBQXlCLENBQTdCLEVBQWdDO0FBQ3JDLGlCQUFPO0FBQ0w0Qyx1QkFBVyx3Q0FBMEJkLGVBQTFCLENBRE47QUFFTHpCLG9CQUFRLGlCQUFPb0M7QUFGVixXQUFQO0FBSUQsU0FMTSxNQUtBLElBQUksS0FBS2EsZUFBTCxFQUFKLEVBQTRCO0FBQ2pDLGlCQUFPLEVBQUVqRCxRQUFRLGlCQUFPQyxPQUFqQixFQUFQO0FBQ0Q7QUFDRCxlQUFPLEtBQUswQyxVQUFMLENBQWdCMUIsSUFBaEIsRUFBc0JRLGdCQUFnQixDQUFoQixDQUF0QixDQUFQO0FBQ0QsTzs7Ozs7Ozs7Ozs7d0RBRWdCO0FBQUE7O0FBQ2YsY0FBTSxtQkFBUW9CLElBQVIsQ0FBYSxLQUFLdEUsUUFBTCxDQUFjcUIsTUFBZCxDQUFxQkMsS0FBbEM7QUFBQSxnREFBeUMsV0FBTW9CLElBQU4sRUFBYztBQUMzRCxrQkFBTSxPQUFLNkIsY0FBTCxDQUFvQjtBQUFBLHFCQUFNLE9BQUtJLE9BQUwsQ0FBYWpDLElBQWIsQ0FBTjtBQUFBLGFBQXBCLENBQU47QUFDRCxXQUZLOztBQUFBO0FBQUE7QUFBQTtBQUFBLFlBQU47QUFHRCxPOzs7Ozs7Ozs7Ozs7a0JBOU1rQjdDLGMiLCJmaWxlIjoidGVzdF9jYXNlX3J1bm5lci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCdcbmltcG9ydCB7IGdldEFtYmlndW91c1N0ZXBFeGNlcHRpb24gfSBmcm9tICcuL2hlbHBlcnMnXG5pbXBvcnQgQXR0YWNobWVudE1hbmFnZXIgZnJvbSAnLi9hdHRhY2htZW50X21hbmFnZXInXG5pbXBvcnQgUHJvbWlzZSBmcm9tICdibHVlYmlyZCdcbmltcG9ydCBTdGF0dXMgZnJvbSAnLi4vc3RhdHVzJ1xuaW1wb3J0IFN0ZXBSdW5uZXIgZnJvbSAnLi9zdGVwX3J1bm5lcidcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGVzdENhc2VSdW5uZXIge1xuICBjb25zdHJ1Y3Rvcih7XG4gICAgZXZlbnRCcm9hZGNhc3RlcixcbiAgICBza2lwLFxuICAgIHRlc3RDYXNlLFxuICAgIHN1cHBvcnRDb2RlTGlicmFyeSxcbiAgICB3b3JsZFBhcmFtZXRlcnMsXG4gIH0pIHtcbiAgICBjb25zdCBhdHRhY2htZW50TWFuYWdlciA9IG5ldyBBdHRhY2htZW50TWFuYWdlcigoeyBkYXRhLCBtZWRpYSB9KSA9PiB7XG4gICAgICBpZiAodGhpcy50ZXN0U3RlcEluZGV4ID4gdGhpcy5tYXhUZXN0U3RlcEluZGV4KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnQ2Fubm90IGF0dGFjaCBhZnRlciBhbGwgc3RlcHMvaG9va3MgaGF2ZSBmaW5pc2hlZCBydW5uaW5nLiBFbnN1cmUgeW91ciBzdGVwL2hvb2sgd2FpdHMgZm9yIHRoZSBhdHRhY2ggdG8gZmluaXNoLidcbiAgICAgICAgKVxuICAgICAgfVxuICAgICAgdGhpcy5lbWl0KCd0ZXN0LXN0ZXAtYXR0YWNobWVudCcsIHtcbiAgICAgICAgaW5kZXg6IHRoaXMudGVzdFN0ZXBJbmRleCxcbiAgICAgICAgZGF0YSxcbiAgICAgICAgbWVkaWEsXG4gICAgICB9KVxuICAgIH0pXG4gICAgdGhpcy5ldmVudEJyb2FkY2FzdGVyID0gZXZlbnRCcm9hZGNhc3RlclxuICAgIHRoaXMuc2tpcCA9IHNraXBcbiAgICB0aGlzLnRlc3RDYXNlID0gdGVzdENhc2VcbiAgICB0aGlzLnN1cHBvcnRDb2RlTGlicmFyeSA9IHN1cHBvcnRDb2RlTGlicmFyeVxuICAgIHRoaXMud29ybGQgPSBuZXcgc3VwcG9ydENvZGVMaWJyYXJ5LldvcmxkKHtcbiAgICAgIGF0dGFjaDogOjphdHRhY2htZW50TWFuYWdlci5jcmVhdGUsXG4gICAgICBwYXJhbWV0ZXJzOiB3b3JsZFBhcmFtZXRlcnMsXG4gICAgfSlcbiAgICB0aGlzLmJlZm9yZUhvb2tEZWZpbml0aW9ucyA9IHRoaXMuZ2V0QmVmb3JlSG9va0RlZmluaXRpb25zKClcbiAgICB0aGlzLmFmdGVySG9va0RlZmluaXRpb25zID0gdGhpcy5nZXRBZnRlckhvb2tEZWZpbml0aW9ucygpXG4gICAgdGhpcy50ZXN0U3RlcEluZGV4ID0gMFxuICAgIHRoaXMubWF4VGVzdFN0ZXBJbmRleCA9XG4gICAgICB0aGlzLmJlZm9yZUhvb2tEZWZpbml0aW9ucy5sZW5ndGggK1xuICAgICAgdGhpcy50ZXN0Q2FzZS5waWNrbGUuc3RlcHMubGVuZ3RoICtcbiAgICAgIHRoaXMuYWZ0ZXJIb29rRGVmaW5pdGlvbnMubGVuZ3RoIC1cbiAgICAgIDFcbiAgICB0aGlzLnJlc3VsdCA9IHtcbiAgICAgIGR1cmF0aW9uOiAwLFxuICAgICAgc3RhdHVzOiB0aGlzLnNraXAgPyBTdGF0dXMuU0tJUFBFRCA6IFN0YXR1cy5QQVNTRUQsXG4gICAgfVxuICAgIHRoaXMudGVzdENhc2VTb3VyY2VMb2NhdGlvbiA9IHtcbiAgICAgIHVyaTogdGhpcy50ZXN0Q2FzZS51cmksXG4gICAgICBsaW5lOiB0aGlzLnRlc3RDYXNlLnBpY2tsZS5sb2NhdGlvbnNbMF0ubGluZSxcbiAgICB9XG4gIH1cblxuICBlbWl0KG5hbWUsIGRhdGEpIHtcbiAgICBjb25zdCBldmVudERhdGEgPSB7IC4uLmRhdGEgfVxuICAgIGlmIChfLnN0YXJ0c1dpdGgobmFtZSwgJ3Rlc3QtY2FzZScpKSB7XG4gICAgICBldmVudERhdGEuc291cmNlTG9jYXRpb24gPSB0aGlzLnRlc3RDYXNlU291cmNlTG9jYXRpb25cbiAgICB9IGVsc2Uge1xuICAgICAgZXZlbnREYXRhLnRlc3RDYXNlID0geyBzb3VyY2VMb2NhdGlvbjogdGhpcy50ZXN0Q2FzZVNvdXJjZUxvY2F0aW9uIH1cbiAgICB9XG4gICAgdGhpcy5ldmVudEJyb2FkY2FzdGVyLmVtaXQobmFtZSwgZXZlbnREYXRhKVxuICB9XG5cbiAgZW1pdFByZXBhcmVkKCkge1xuICAgIGNvbnN0IHN0ZXBzID0gW11cbiAgICB0aGlzLmJlZm9yZUhvb2tEZWZpbml0aW9ucy5mb3JFYWNoKGRlZmluaXRpb24gPT4ge1xuICAgICAgY29uc3QgYWN0aW9uTG9jYXRpb24gPSB7IHVyaTogZGVmaW5pdGlvbi51cmksIGxpbmU6IGRlZmluaXRpb24ubGluZSB9XG4gICAgICBzdGVwcy5wdXNoKHsgYWN0aW9uTG9jYXRpb24gfSlcbiAgICB9KVxuICAgIHRoaXMudGVzdENhc2UucGlja2xlLnN0ZXBzLmZvckVhY2goc3RlcCA9PiB7XG4gICAgICBjb25zdCBhY3Rpb25Mb2NhdGlvbnMgPSB0aGlzLmdldFN0ZXBEZWZpbml0aW9ucyhzdGVwKS5tYXAoZGVmaW5pdGlvbiA9PiAoe1xuICAgICAgICB1cmk6IGRlZmluaXRpb24udXJpLFxuICAgICAgICBsaW5lOiBkZWZpbml0aW9uLmxpbmUsXG4gICAgICB9KSlcbiAgICAgIGNvbnN0IHNvdXJjZUxvY2F0aW9uID0ge1xuICAgICAgICB1cmk6IHRoaXMudGVzdENhc2UudXJpLFxuICAgICAgICBsaW5lOiBfLmxhc3Qoc3RlcC5sb2NhdGlvbnMpLmxpbmUsXG4gICAgICB9XG4gICAgICBjb25zdCBkYXRhID0geyBzb3VyY2VMb2NhdGlvbiB9XG4gICAgICBpZiAoYWN0aW9uTG9jYXRpb25zLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBkYXRhLmFjdGlvbkxvY2F0aW9uID0gYWN0aW9uTG9jYXRpb25zWzBdXG4gICAgICB9XG4gICAgICBzdGVwcy5wdXNoKGRhdGEpXG4gICAgfSlcbiAgICB0aGlzLmFmdGVySG9va0RlZmluaXRpb25zLmZvckVhY2goZGVmaW5pdGlvbiA9PiB7XG4gICAgICBjb25zdCBhY3Rpb25Mb2NhdGlvbiA9IHsgdXJpOiBkZWZpbml0aW9uLnVyaSwgbGluZTogZGVmaW5pdGlvbi5saW5lIH1cbiAgICAgIHN0ZXBzLnB1c2goeyBhY3Rpb25Mb2NhdGlvbiB9KVxuICAgIH0pXG4gICAgdGhpcy5lbWl0KCd0ZXN0LWNhc2UtcHJlcGFyZWQnLCB7IHN0ZXBzIH0pXG4gIH1cblxuICBnZXRBZnRlckhvb2tEZWZpbml0aW9ucygpIHtcbiAgICByZXR1cm4gdGhpcy5zdXBwb3J0Q29kZUxpYnJhcnkuYWZ0ZXJUZXN0Q2FzZUhvb2tEZWZpbml0aW9ucy5maWx0ZXIoXG4gICAgICBob29rRGVmaW5pdGlvbiA9PiBob29rRGVmaW5pdGlvbi5hcHBsaWVzVG9UZXN0Q2FzZSh0aGlzLnRlc3RDYXNlKVxuICAgIClcbiAgfVxuXG4gIGdldEJlZm9yZUhvb2tEZWZpbml0aW9ucygpIHtcbiAgICByZXR1cm4gdGhpcy5zdXBwb3J0Q29kZUxpYnJhcnkuYmVmb3JlVGVzdENhc2VIb29rRGVmaW5pdGlvbnMuZmlsdGVyKFxuICAgICAgaG9va0RlZmluaXRpb24gPT4gaG9va0RlZmluaXRpb24uYXBwbGllc1RvVGVzdENhc2UodGhpcy50ZXN0Q2FzZSlcbiAgICApXG4gIH1cblxuICBnZXRTdGVwRGVmaW5pdGlvbnMoc3RlcCkge1xuICAgIHJldHVybiB0aGlzLnN1cHBvcnRDb2RlTGlicmFyeS5zdGVwRGVmaW5pdGlvbnMuZmlsdGVyKHN0ZXBEZWZpbml0aW9uID0+XG4gICAgICBzdGVwRGVmaW5pdGlvbi5tYXRjaGVzU3RlcE5hbWUoe1xuICAgICAgICBzdGVwTmFtZTogc3RlcC50ZXh0LFxuICAgICAgICBwYXJhbWV0ZXJUeXBlUmVnaXN0cnk6IHRoaXMuc3VwcG9ydENvZGVMaWJyYXJ5LnBhcmFtZXRlclR5cGVSZWdpc3RyeSxcbiAgICAgIH0pXG4gICAgKVxuICB9XG5cbiAgaW52b2tlU3RlcChzdGVwLCBzdGVwRGVmaW5pdGlvbiwgaG9va1BhcmFtZXRlcikge1xuICAgIHJldHVybiBTdGVwUnVubmVyLnJ1bih7XG4gICAgICBkZWZhdWx0VGltZW91dDogdGhpcy5zdXBwb3J0Q29kZUxpYnJhcnkuZGVmYXVsdFRpbWVvdXQsXG4gICAgICBob29rUGFyYW1ldGVyLFxuICAgICAgcGFyYW1ldGVyVHlwZVJlZ2lzdHJ5OiB0aGlzLnN1cHBvcnRDb2RlTGlicmFyeS5wYXJhbWV0ZXJUeXBlUmVnaXN0cnksXG4gICAgICBzdGVwLFxuICAgICAgc3RlcERlZmluaXRpb24sXG4gICAgICB3b3JsZDogdGhpcy53b3JsZCxcbiAgICB9KVxuICB9XG5cbiAgaXNTa2lwcGluZ1N0ZXBzKCkge1xuICAgIHJldHVybiB0aGlzLnJlc3VsdC5zdGF0dXMgIT09IFN0YXR1cy5QQVNTRURcbiAgfVxuXG4gIHNob3VsZFVwZGF0ZVN0YXR1cyh0ZXN0U3RlcFJlc3VsdCkge1xuICAgIHN3aXRjaCAodGVzdFN0ZXBSZXN1bHQuc3RhdHVzKSB7XG4gICAgICBjYXNlIFN0YXR1cy5GQUlMRUQ6XG4gICAgICBjYXNlIFN0YXR1cy5BTUJJR1VPVVM6XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgdGhpcy5yZXN1bHQuc3RhdHVzICE9PSBTdGF0dXMuRkFJTEVEIHx8XG4gICAgICAgICAgdGhpcy5yZXN1bHQuc3RhdHVzICE9PSBTdGF0dXMuQU1CSUdVT1VTXG4gICAgICAgIClcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgdGhpcy5yZXN1bHQuc3RhdHVzID09PSBTdGF0dXMuUEFTU0VEIHx8XG4gICAgICAgICAgdGhpcy5yZXN1bHQuc3RhdHVzID09PSBTdGF0dXMuU0tJUFBFRFxuICAgICAgICApXG4gICAgfVxuICB9XG5cbiAgYXN5bmMgYXJvdW5kVGVzdFN0ZXAocnVuU3RlcEZuKSB7XG4gICAgdGhpcy5lbWl0KCd0ZXN0LXN0ZXAtc3RhcnRlZCcsIHsgaW5kZXg6IHRoaXMudGVzdFN0ZXBJbmRleCB9KVxuICAgIGNvbnN0IHRlc3RTdGVwUmVzdWx0ID0gYXdhaXQgcnVuU3RlcEZuKClcbiAgICBpZiAodGVzdFN0ZXBSZXN1bHQuZHVyYXRpb24pIHtcbiAgICAgIHRoaXMucmVzdWx0LmR1cmF0aW9uICs9IHRlc3RTdGVwUmVzdWx0LmR1cmF0aW9uXG4gICAgfVxuICAgIGlmICh0aGlzLnNob3VsZFVwZGF0ZVN0YXR1cyh0ZXN0U3RlcFJlc3VsdCkpIHtcbiAgICAgIHRoaXMucmVzdWx0LnN0YXR1cyA9IHRlc3RTdGVwUmVzdWx0LnN0YXR1c1xuICAgIH1cbiAgICBpZiAodGVzdFN0ZXBSZXN1bHQuZXhjZXB0aW9uKSB7XG4gICAgICB0aGlzLnJlc3VsdC5leGNlcHRpb24gPSB0ZXN0U3RlcFJlc3VsdC5leGNlcHRpb25cbiAgICB9XG4gICAgdGhpcy5lbWl0KCd0ZXN0LXN0ZXAtZmluaXNoZWQnLCB7XG4gICAgICBpbmRleDogdGhpcy50ZXN0U3RlcEluZGV4LFxuICAgICAgcmVzdWx0OiB0ZXN0U3RlcFJlc3VsdCxcbiAgICB9KVxuICAgIHRoaXMudGVzdFN0ZXBJbmRleCArPSAxXG4gIH1cblxuICBhc3luYyBydW4oKSB7XG4gICAgdGhpcy5lbWl0UHJlcGFyZWQoKVxuICAgIHRoaXMuZW1pdCgndGVzdC1jYXNlLXN0YXJ0ZWQnLCB7fSlcbiAgICBhd2FpdCB0aGlzLnJ1bkhvb2tzKHRoaXMuYmVmb3JlSG9va0RlZmluaXRpb25zLCB7XG4gICAgICBzb3VyY2VMb2NhdGlvbjogdGhpcy50ZXN0Q2FzZVNvdXJjZUxvY2F0aW9uLFxuICAgICAgcGlja2xlOiB0aGlzLnRlc3RDYXNlLnBpY2tsZSxcbiAgICB9KVxuICAgIGF3YWl0IHRoaXMucnVuU3RlcHMoKVxuICAgIGF3YWl0IHRoaXMucnVuSG9va3ModGhpcy5hZnRlckhvb2tEZWZpbml0aW9ucywge1xuICAgICAgc291cmNlTG9jYXRpb246IHRoaXMudGVzdENhc2VTb3VyY2VMb2NhdGlvbixcbiAgICAgIHBpY2tsZTogdGhpcy50ZXN0Q2FzZS5waWNrbGUsXG4gICAgICByZXN1bHQ6IHRoaXMucmVzdWx0LFxuICAgIH0pXG4gICAgdGhpcy5lbWl0KCd0ZXN0LWNhc2UtZmluaXNoZWQnLCB7IHJlc3VsdDogdGhpcy5yZXN1bHQgfSlcbiAgICByZXR1cm4gdGhpcy5yZXN1bHRcbiAgfVxuXG4gIGFzeW5jIHJ1bkhvb2soaG9va0RlZmluaXRpb24sIGhvb2tQYXJhbWV0ZXIpIHtcbiAgICBpZiAodGhpcy5za2lwKSB7XG4gICAgICByZXR1cm4geyBzdGF0dXM6IFN0YXR1cy5TS0lQUEVEIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuaW52b2tlU3RlcChudWxsLCBob29rRGVmaW5pdGlvbiwgaG9va1BhcmFtZXRlcilcbiAgfVxuXG4gIGFzeW5jIHJ1bkhvb2tzKGhvb2tEZWZpbml0aW9ucywgaG9va1BhcmFtZXRlcikge1xuICAgIGF3YWl0IFByb21pc2UuZWFjaChob29rRGVmaW5pdGlvbnMsIGFzeW5jIGhvb2tEZWZpbml0aW9uID0+IHtcbiAgICAgIGF3YWl0IHRoaXMuYXJvdW5kVGVzdFN0ZXAoKCkgPT5cbiAgICAgICAgdGhpcy5ydW5Ib29rKGhvb2tEZWZpbml0aW9uLCBob29rUGFyYW1ldGVyKVxuICAgICAgKVxuICAgIH0pXG4gIH1cblxuICBhc3luYyBydW5TdGVwKHN0ZXApIHtcbiAgICBjb25zdCBzdGVwRGVmaW5pdGlvbnMgPSB0aGlzLmdldFN0ZXBEZWZpbml0aW9ucyhzdGVwKVxuICAgIGlmIChzdGVwRGVmaW5pdGlvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4geyBzdGF0dXM6IFN0YXR1cy5VTkRFRklORUQgfVxuICAgIH0gZWxzZSBpZiAoc3RlcERlZmluaXRpb25zLmxlbmd0aCA+IDEpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGV4Y2VwdGlvbjogZ2V0QW1iaWd1b3VzU3RlcEV4Y2VwdGlvbihzdGVwRGVmaW5pdGlvbnMpLFxuICAgICAgICBzdGF0dXM6IFN0YXR1cy5BTUJJR1VPVVMsXG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0aGlzLmlzU2tpcHBpbmdTdGVwcygpKSB7XG4gICAgICByZXR1cm4geyBzdGF0dXM6IFN0YXR1cy5TS0lQUEVEIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuaW52b2tlU3RlcChzdGVwLCBzdGVwRGVmaW5pdGlvbnNbMF0pXG4gIH1cblxuICBhc3luYyBydW5TdGVwcygpIHtcbiAgICBhd2FpdCBQcm9taXNlLmVhY2godGhpcy50ZXN0Q2FzZS5waWNrbGUuc3RlcHMsIGFzeW5jIHN0ZXAgPT4ge1xuICAgICAgYXdhaXQgdGhpcy5hcm91bmRUZXN0U3RlcCgoKSA9PiB0aGlzLnJ1blN0ZXAoc3RlcCkpXG4gICAgfSlcbiAgfVxufVxuIl19